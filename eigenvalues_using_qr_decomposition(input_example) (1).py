# -*- coding: utf-8 -*-
"""Eigenvalues using QR decomposition(input example).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j2CdQcs3jPZ_MLaiuVQ94EXxTfdmzEVF
"""

#Eigenvalues using QR decomposition(input example)
import numpy as np

def qr_decomposition(A, threshold=1e-10):
    m, n = A.shape
    Q = np.eye(m)
    R = A.astype(float).copy()

    for j in range(n):
        x = R[j:, j]
        e = np.zeros_like(x)
        e[0] = np.sign(x[0] or 1)

        u = x + np.linalg.norm(x) * e
        u /= np.linalg.norm(u)

        R[j:, :] -= 2.0 * np.outer(u, u @ R[j:, :])

        # Set very small values in R to zero
        R[np.abs(R) < threshold] = 0.0

        Q[:, j:] -= 2.0 * Q[:, j:] @ np.outer(u, u)

    # Set very small values in Q to zero
    Q[np.abs(Q) < threshold] = 0.0

    return Q, R


def qr_iteration_eigenvalues(A, num_iterations=100):
    m, n = A.shape
    eigenvalues = []

    for _ in range(num_iterations):
        Q, R = qr_decomposition(A)
        A = R @ Q

    for i in range(m):
        eigenvalues.append(A[i][i])

    return eigenvalues

# Example usage with user input
m = int(input("Enter the number of rows: "))
n = int(input("Enter the number of columns: "))

A = np.zeros((m, n))
for i in range(m):
    row = input(f"Enter space-separated values for row {i+1}: ").split()
    A[i, :] = [float(val) for val in row]

Q, R = qr_decomposition(A)
eigenvalues = qr_iteration_eigenvalues(A)


print("Q:")
print(Q)
print("R:")
print(R)
print("Eigenvalues:")
print(eigenvalues)